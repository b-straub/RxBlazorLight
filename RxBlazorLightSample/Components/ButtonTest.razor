@inherits RxBLComponent<TestService>

<PageTitle>Counter</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>
<MudText Class="mb-4">Current count: @Service.Count</MudText>

<MudStack>
    <MudStack Row=@true>
        <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" RxCommand=@Service.Increment>Increment</MudButtonRx>
        <MudButtonPRx Color="Color.Primary" Variant="Variant.Filled" Parameter="5" RxCommand=@Service.Add>Add</MudButtonPRx>

        <MudButtonAsyncRx Color="Color.Secondary" Variant="Variant.Filled" RxCommand=@Service.IncrementAsync CancelText="Cancel Add">
            IncrementAsync
        </MudButtonAsyncRx>

        <MudButtonAsyncPRx Color="Color.Secondary" Variant="Variant.Filled" Parameter=2 RxCommand=@Service.AddAsync.Clone() ConfirmExecution=@ConfirmAdd CancelText="Cancel Add">
            AddAsync 10
        </MudButtonAsyncPRx>
    </MudStack>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudFabRx Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlusOne" RxCommand=@Service.Increment>Increment</MudFabRx>
        <MudFabPRx Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Parameter="5" RxCommand=@Service.Add>Add</MudFabPRx>
        <MudFabAsyncRx Color="Color.Secondary" EndIcon="@Icons.Material.Filled.PlusOne" RxCommand=@Service.IncrementAsync />
        <MudFabAsyncPRx Color="Color.Secondary" Parameter=5 EndIcon="@Icons.Material.Filled.Add" CancelText="Cancel" CancelColor=@Color.Error RxCommand=@Service.AddAsync.Clone() ConfirmExecution=@ConfirmAdd />
    </MudStack>

    <MudStack Row=@true>
        <MudIconButtonRx Color="Color.Primary" Icon="@Icons.Material.Filled.PlusOne" RxCommand=@Service.Increment>Increment</MudIconButtonRx>
        <MudIconButtonPRx Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Parameter="5" RxCommand=@Service.Add>Add</MudIconButtonPRx>
        <MudIconButtonAsyncRx Color="Color.Secondary" Icon="@Icons.Material.Filled.PlusOne" RxCommand=@Service.IncrementAsync />
        <MudIconButtonAsyncPRx Color="Color.Secondary" Parameter=10 Icon="@Icons.Material.Filled.Add" RxCommand=@Service.AddAsync.Clone() ConfirmExecution=@ConfirmAdd />
    </MudStack>

    <MudStack Row=@true>
        <MudSwitchRx RxInput=@Service.AddMode Label="Switch to Add mode" />
        <MudFabAsyncPRx Color="Color.Secondary" Parameter=2 ParameterAsyncTransformation=@DoTransformParameterAsync
                        EndIcon=@(Service.AddMode.Value ? @Icons.Material.Filled.Add : Icons.Material.Filled.Remove)
                        RxCommand=@Service.AddRemoveAsync ConfirmExecution=@ConfirmAdd />
        @if (Service.CommandExceptions.Any())
        {
            <MudStack>
                <MudText Typo="Typo.h5" GutterBottom="true">@Service.CommandExceptions.Aggregate("", (p, n) => p + n.Message + ", ")</MudText>
                <MudButton Color="Color.Primary" OnClick=@(() => Service.ResetCommandExceptions())>Reset Exceptions</MudButton>
            </MudStack>
        }
    </MudStack>
</MudStack>

@code {
    [Inject]
    private IDialogService? DialogService { get; set; }

    private async Task<bool> ConfirmAdd()
    {
        ArgumentNullException.ThrowIfNull(DialogService);

        var parameters = new DialogParameters { ["Message"] = "Execute Add", ["Confirm"] = "Execute?" };
        var dialog = DialogService.Show<ConfirmDialog>("Counter", parameters);

        var res = await dialog.Result;

        if (res.Canceled)
        {
            return false;
        }

        return true;
    }

    private async Task<int?> DoTransformParameterAsync(int? parameter, CancellationToken token)
    {
        if (Service.Count > 20)
        {
            return null;
        }

        await Task.Delay(1000, token);
        parameter *= 5;

        return parameter;
    }
        }
