@inherits MudButton
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required Func<ICommandAsync<T>> RxCommandAsyncFactory { get; init; }

    [Parameter]
    public T? Parameter { get; set; }

    [Parameter]
    public Func<ICommandAsync<T>, CancellationToken, Task<bool>>? PrepareExecutionAsync { get; set; }

    [Parameter]
    public Action? BeforeExecution { get; set; }

    [Parameter]
    public Action? AfterExecution { get; set; }

    [Parameter]
    public string? CancelText { get; set; }

    [Parameter]
    public Color? CancelColor { get; set; }

    public ICommandAsync<T>? RxCommandAsync { get; private set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private ButtonAsyncPRX<T>? _buttonAsyncPRX;
    private Color _buttonColor;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(RxCommandAsyncFactory);
        RxCommandAsync = RxCommandAsyncFactory();

        _buttonAsyncPRX = ButtonAsyncPRX<T>.Create(MBButtonType.DEFAULT, Color, ChildContent, RxCommandAsync, BeforeExecution, AfterExecution, CancelText, CancelColor);
        _buttonColor = Color;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(_buttonAsyncPRX);
        ArgumentNullException.ThrowIfNull(RxCommandAsync);

        RxCommandAsync.PrepareExecutionAsync = PrepareExecutionAsync;
        _buttonAsyncPRX.SetParameters(Parameter);

        Disabled = _buttonAsyncPRX.Disabled;
        OnClick = (EventCallback<MouseEventArgs>)_buttonAsyncPRX.OnClick;
        ChildContent = _buttonAsyncPRX.ChildContent;
        Color = _buttonAsyncPRX.Color;

        base.OnParametersSet();
    }
}
