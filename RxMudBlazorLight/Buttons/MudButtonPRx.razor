@inherits MudButton
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required IStateTransformer<T> StateTransformer { get; init; }

    [Parameter, EditorRequired]
    public required Func<IStateTransformer<T>, Task> ValueFactoryAsync { get; init; }

    [Parameter]
    public string? CancelText { get; set; }

    [Parameter]
    public Color? CancelColor { get; set; }

    [Parameter]
    public T? Context { get; set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private ButtonPRx<T>? _buttonPRx;
    private Color _buttonColor;

    protected override void OnInitialized()
    {
        _buttonPRx = ButtonPRx<T>.Create(MBButtonType.DEFAULT, ValueFactoryAsync, Color, ChildContent, CancelText, CancelColor, Context);
        _buttonColor = Color;

        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        ArgumentNullException.ThrowIfNull(_buttonPRx);
        _buttonPRx.SetParameter(StateTransformer);

        ChildContent = _buttonPRx.ChildContent;
        Color = _buttonPRx.Color;
        OnClick = (EventCallback<MouseEventArgs>)_buttonPRx.OnClick;
        Disabled = _buttonPRx.Disabled;

        await base.OnParametersSetAsync();
    }
}
