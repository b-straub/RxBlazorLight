@inherits MudButton
@typeparam T

@RenderBase()

@code {
    [Parameter]
    public Func<T, Task>? ActionAsync { get; init; }

    [Parameter]
    public Action<T>? Action { get; init; }

    [Parameter, EditorRequired]
    public required IRxBLService<T> Service { get; init; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private StateChangePhase _phase = StateChangePhase.NONE;

    protected override void OnInitialized()
    {
        if (Action is null && ActionAsync is null)
        {
            throw new InvalidOperationException("Either Action or ActionAsync must be provided!");
        }

        if (Action is not null && ActionAsync is not null)
        {
            throw new InvalidOperationException("Only Action or ActionAsync can be provided!");
        }

        if (Action is not null)
        {
            OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, () => Service.SetState(Action));
        }

        if (ActionAsync is not null)
        {
            OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, async () => await Service.SetStateAsync(ActionAsync, StateChanged));
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        Disabled = Disabled || _phase is StateChangePhase.CHANGING;
        base.OnParametersSet();
    }

    private void StateChanged(StateChangePhase phase)
    {
        _phase = phase;
    }
}
