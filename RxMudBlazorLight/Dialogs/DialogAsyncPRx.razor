@typeparam T

<MudElement>
    <MudDialog>
        <DialogContent>
            @Message
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color=@(SuccessOnConfirm ? Color.Error : Color.Success) OnClick="Cancel">Cancel</MudButton>
            <MudButtonAsyncPRx @ref=_buttonRef Variant="Variant.Filled" Color=@(SuccessOnConfirm ? Color.Success : Color.Error)
                              RxCommandAsyncFactory=@(() => RxCommandAsyncP!) Parameter=@Parameter 
                              PrepareExecutionAsync=@(PrepareExecutionAsync!) ConfirmExecution=@(ConfirmExecution!)
                              BeforeExecution=@BeforeExecutionDo AfterExecution=@AfterExecutionDo CancelText=@CancelText>
                @ConfirmButton
            </MudButtonAsyncPRx>
        </DialogActions>
    </MudDialog>
</MudElement>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public required string Message { get; init; }

    [Parameter]
    public string ConfirmButton { get; set; } = "Delete";

    [Parameter]
    public bool SuccessOnConfirm { get; set; } = false;

    [Parameter]
    public required ICommandAsync<T> RxCommandAsyncP { get; init; }

    [Parameter]
    public T? Parameter { get; set; }

    [Parameter]
    public Func<ICommandAsync<T>, CancellationToken, Task<bool>>? PrepareExecutionAsync { get; set; }

    [Parameter]
    public Func<T?, Task<bool>>? ConfirmExecution { get; set; }

    [Parameter]
    public Action? BeforeExecution { get; set; }

    [Parameter]
    public Action? AfterExecution { get; set; }

    [Parameter]
    public string? CancelText { get; set; }

    private void Cancel() => MudDialog?.Cancel();
    private MudButtonAsyncPRx<T?>? _buttonRef;
    private IDisposable? _buttonDisposable;

    private void BeforeExecutionDo()
    {
        if (_buttonRef?.RxCommandAsync is not null && _buttonDisposable is null)
        {
            _buttonDisposable = _buttonRef.RxCommandAsync.Subscribe(_ => InvokeAsync(StateHasChanged));
        }

        if (BeforeExecution is not null)
        {
            BeforeExecution();
        }
    }

    private void AfterExecutionDo()
    {
        if (AfterExecution is not null)
        {
            AfterExecution();
        }

        _buttonDisposable?.Dispose();
        _buttonDisposable = null;

        MudDialog?.Close(DialogResult.Ok(true));
    }
}