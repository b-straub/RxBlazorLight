@inherits MudFab
@typeparam T

<MudBadge Visible=@(GetProgressIcon() != string.Empty) Icon=@GetProgressIcon() Color=@Color Overlap="true" Bordered="true">
    @RenderBase()
</MudBadge>

@code {
    [Parameter, EditorRequired]
    public required Func<ICommandAsync<T>> RxCommandAsyncFactory { get; init; }

    [Parameter]
    public T? Parameter { get; set; }

    [Parameter]
    public Func<ICommandAsync<T>, CancellationToken, Task<bool>>? PrepareExecutionAsync { get; set; }

    [Parameter]
    public Action? BeforeExecution { get; set; }

    [Parameter]
    public Action? AfterExecution { get; set; }

    [Parameter]
    public Color? CancelColor { get; set; }

    [Parameter]
    public string? CancelText { get; set; }

    [Parameter]
    public MBIconVariant? IconVariant { get; set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private ButtonAsyncPRX<T>? _buttonAsyncPRX;
    private Color _buttonColor;
    private ICommandAsync<T>? _rxCommandAsync;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(RxCommandAsyncFactory);
        _rxCommandAsync = RxCommandAsyncFactory();

        _buttonAsyncPRX = ButtonAsyncPRX<T>.Create(MBButtonType.FAB, Color, null, _rxCommandAsync, BeforeExecution, AfterExecution, null, CancelText);
        _buttonColor = Color;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(_buttonAsyncPRX);
        ArgumentNullException.ThrowIfNull(_rxCommandAsync);

        _rxCommandAsync.PrepareExecutionAsync = PrepareExecutionAsync;
        _buttonAsyncPRX.SetParameters(Parameter);

        var parameters = _buttonAsyncPRX.GetFabParameters(StartIcon, EndIcon, Label, IconVariant);
        StartIcon = parameters.StartIcon;
        EndIcon = parameters.EndIcon;
        Label = parameters.Label;

        Disabled = _buttonAsyncPRX.Disabled;
        OnClick = (EventCallback<MouseEventArgs>)_buttonAsyncPRX.OnClick;
        Color = _buttonAsyncPRX.Color;

        base.OnParametersSet();
    }

    private string GetProgressIcon()
    {
        if (_rxCommandAsync is not null && CancelText is null && _rxCommandAsync.HasProgress() && _rxCommandAsync.Executing())
        {
            return IconVariant.GetProgressIcon();
        }

        return string.Empty;
    }
}
