@inherits MudFab

<MudBadge Visible=@(GetProgressIcon() != string.Empty) Icon=@GetProgressIcon() Color=@Color Overlap="true" Bordered="true">
    @RenderBase()
</MudBadge>

@code {
    [Parameter, EditorRequired]
    public required Func<ICommandAsync>? RxCommandAsyncFactory { get; init; }

    [Parameter]
    public Func<ICommandAsync, CancellationToken, Task<bool>>? PrepareExecutionAsync { get; set; }

    [Parameter]
    public Action? BeforeExecution { get; set; }

    [Parameter]
    public Action? AfterExecution { get; set; }

    [Parameter]
    public string? CancelText { get; set; }

    [Parameter]
    public Color? CancelColor { get; set; }

    [Parameter]
    public MBIconVariant? IconVariant { get; set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private ButtonAsyncRX? _buttonAsyncRX;
    private string? _buttonStartIcon;
    private string? _buttonEndIcon;
    private ICommandAsync? _rxCommandAsync;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(RxCommandAsyncFactory);
        _rxCommandAsync = RxCommandAsyncFactory();

        _buttonAsyncRX = ButtonAsyncRX.Create(MBButtonType.FAB, Color, null, _rxCommandAsync, BeforeExecution, AfterExecution, CancelColor, CancelText);
        _buttonStartIcon = StartIcon;
        _buttonEndIcon = EndIcon;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(_buttonAsyncRX);
        ArgumentNullException.ThrowIfNull(_rxCommandAsync);

        _rxCommandAsync.PrepareExecutionAsync = PrepareExecutionAsync;
        _buttonAsyncRX.SetParameters();

        var parameters = _buttonAsyncRX.GetFabParameters(StartIcon, EndIcon, Label, IconVariant);
        StartIcon = parameters.StartIcon;
        EndIcon = parameters.EndIcon;
        Label = parameters.Label;

        Disabled = _buttonAsyncRX.Disabled;
        OnClick = (EventCallback<MouseEventArgs>)_buttonAsyncRX.OnClick;
        Color = _buttonAsyncRX.Color;

        base.OnParametersSet();
    }

    private string GetProgressIcon()
    {
        if (_rxCommandAsync is not null && CancelText is null && _rxCommandAsync.HasProgress() && _rxCommandAsync.Executing())
        {
            return IconVariant.GetProgressIcon();
        }

        return string.Empty;
    }
}
