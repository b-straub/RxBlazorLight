@inherits MudFab
@typeparam T

<MudBadge Visible=@(_buttonPRx is not null && _buttonPRx.GetFabProgressIcon(StateTransformer, IconVariant) != string.Empty) 
    Icon=@_buttonPRx?.GetFabProgressIcon(StateTransformer, IconVariant) Color=@Color Overlap="true" Bordered="true">
    @RenderBase()
</MudBadge>

@code {
    [Parameter, EditorRequired]
    public required IStateTransformer<T> StateTransformer { get; init; }

    [Parameter, EditorRequired]
    public required Func<IStateTransformer<T>, Task> ValueFactoryAsync { get; init; }

    [Parameter]
    public string? CancelText { get; set; }

    [Parameter]
    public Color? CancelColor { get; set; }

    [Parameter]
    public MBIconVariant? IconVariant { get; set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);

    private ButtonPRx<T>? _buttonPRx;

    protected override void OnInitialized()
    {
        _buttonPRx = ButtonPRx<T>.Create(MBButtonType.FAB, ValueFactoryAsync, Color, null, CancelText, CancelColor);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(_buttonPRx);
        _buttonPRx.SetParameter(StateTransformer);

        var parameters = _buttonPRx.GetFabParameters(StateTransformer, StartIcon, EndIcon, Label, IconVariant);
        StartIcon = parameters.StartIcon;
        EndIcon = parameters.EndIcon;
        Label = parameters.Label;

        OnClick = (EventCallback<MouseEventArgs>)_buttonPRx.OnClick;
        Disabled = _buttonPRx.Disabled;

        base.OnParametersSet();
    }
}
