@inherits MudFab
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required IState<T> State { get; init; }

    [Parameter, EditorRequired]
    public required Action<IState<T>> ChangeState { get; init; }

    [Parameter]
    public Func<IState<T>, bool>? CanChange { get; init; }

    [Parameter]
    public Func<Task<bool>>? ConfirmExecutionAsync { get; init; }

    [Parameter]
    public MBIconVariant? IconVariant { get; set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private ButtonRx<T>? _buttonRx;

    protected override void OnInitialized()
    {
        _buttonRx = ButtonRx<T>.Create(MBButtonType.FAB, ConfirmExecutionAsync, Color);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(_buttonRx);
        _buttonRx.SetParameter(State, ChangeState, CanChange);

        var parameters = _buttonRx.GetFabParameters(State, StartIcon, EndIcon, Label, IconVariant, false);
        StartIcon = parameters.StartIcon;
        EndIcon = parameters.EndIcon;
        Label = parameters.Label;

        OnClick = (EventCallback<MouseEventArgs>)_buttonRx.OnClick;
        Disabled = _buttonRx.Disabled;

        base.OnParametersSet();
    }
}
