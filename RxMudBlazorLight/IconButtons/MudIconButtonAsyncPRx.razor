@inherits MudIconButton
@typeparam T

@RenderBase()

@code {
    [Parameter]
    public T? Parameter { get; set; }

    [Parameter]
    public Func<T?, CancellationToken, Task<T?>>? ParameterAsyncTransformation { get; set; }

    [Parameter]
    public Func<Task<bool>>? ConfirmExecution { get; set; }

    [Parameter]
    public Action? BeforeExecution { get; set; }

    [Parameter]
    public Action? AfterExecution { get; set; }

    [Parameter]
    public MBIconVariant? IconVariant { get; set; }

    [Parameter]
    public ICommandAsync<T>? RxCommand { get; set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private ButtonAsyncPRX<T>? _buttonAsyncPRX;
    private Color _buttonColor;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(RxCommand);

        _buttonAsyncPRX = ButtonAsyncPRX<T>.Create(MBButtonType.DEFAULT, Color, null, RxCommand, ConfirmExecution, BeforeExecution, AfterExecution, null, null);
        _buttonColor = Color;

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (ChildContent is not null)
        {
            throw new InvalidOperationException("Async IconButton can not have ChildContent, user normal button with icon instead!");
        }

        ArgumentNullException.ThrowIfNull(_buttonAsyncPRX);
        ArgumentNullException.ThrowIfNull(RxCommand);
         
        _buttonAsyncPRX.SetParameters(Parameter, ParameterAsyncTransformation);

        Icon = _buttonAsyncPRX.GetIconButtonParamters(Icon, IconVariant);
        Disabled = _buttonAsyncPRX.Disabled;
        OnClick = (EventCallback<MouseEventArgs>)_buttonAsyncPRX.OnClick;
        Color = _buttonAsyncPRX.Color;

        base.OnParametersSet();
    }
}
