@inherits MudIconButton

<MudBadge Visible=@(GetProgressIcon() != string.Empty) Icon=@GetProgressIcon() Color=@Color Overlap="true" Bordered="true">
    @RenderBase()
</MudBadge>

@code {
    [Parameter, EditorRequired]
    public required ICommandAsync RxCommandAsync { get; init; }

    [Parameter]
    public Func<ICommandAsync, CancellationToken, Task<bool>>? PrepareExecutionAsync { get; set; }

    [Parameter]
    public Action? BeforeExecution { get; set; }

    [Parameter]
    public Action? AfterExecution { get; set; }

    [Parameter]
    public MBIconVariant? IconVariant { get; set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private ButtonAsyncRX? _buttonAsyncRX;

    protected override void OnInitialized()
    {
        _buttonAsyncRX = ButtonAsyncRX.Create(MBButtonType.ICON, Color, ChildContent, RxCommandAsync, BeforeExecution, AfterExecution, null, null);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (ChildContent is not null)
        {
            throw new InvalidOperationException("Async IconButton can not have ChildContent, user normal button with icon instead!");
        }

        ArgumentNullException.ThrowIfNull(_buttonAsyncRX);
        ArgumentNullException.ThrowIfNull(Icon);

        RxCommandAsync.PrepareExecutionAsync = PrepareExecutionAsync;
        _buttonAsyncRX.SetParameters();

        Icon = _buttonAsyncRX.GetIconButtonParameters(Icon, IconVariant);
        Disabled = _buttonAsyncRX.Disabled;
        OnClick = (EventCallback<MouseEventArgs>)_buttonAsyncRX.OnClick;
        Color = _buttonAsyncRX.Color;

        base.OnParametersSet();
    }

    private string GetProgressIcon()
    {
        if (RxCommandAsync.HasProgress() && RxCommandAsync.Executing())
        {
            return IconVariant.GetProgressIcon();
        }

        return string.Empty;
    }
}
