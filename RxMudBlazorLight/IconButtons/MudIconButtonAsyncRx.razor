@inherits MudIconButton

<MudBadge Visible=@(_buttonRx is not null && _buttonRx.GetBadgeIcon(StateCommand, IconVariant) != string.Empty)
          Icon=@_buttonRx!.GetBadgeIcon(StateCommand, IconVariant) Color=@Color Overlap="true" OnClick=@OnClick>
    @RenderBase()
</MudBadge>

@code {
    [Parameter, EditorRequired]
    public required IStateCommandAsync StateCommand { get; init; }

    [Parameter, EditorRequired]
    public required Func<IStateCommandAsync, Task> ExecuteAsyncCallback { get; init; }

    [Parameter]
    public Func<bool>? CanChangeCallback { get; init; }

    [Parameter]
    public Func<Task<bool>>? ConfirmExecutionAsync { get; init; }

    [Parameter]
    public MBIconVariant? IconVariant { get; set; }

    [Parameter]
    public Color? CancelColor { get; set; }

    [Parameter]
    public bool HasProgress { get; set; } = true;

    [Parameter]
    public bool DeferredNotification { get; set; }

    private RenderFragment RenderBase() => base.BuildRenderTree;
    private ButtonRx? _buttonRx;

    protected override void OnInitialized()
    {
        _buttonRx = ButtonRx.Create(MBButtonType.ICON, ConfirmExecutionAsync, Color, null, HasProgress, null, CancelColor);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(_buttonRx);
        ArgumentNullException.ThrowIfNull(Icon);
        _buttonRx.SetParameter(StateCommand, ExecuteAsyncCallback, CanChangeCallback, DeferredNotification);

        Icon = _buttonRx.GetIconButtonParameters(StateCommand, Icon, IconVariant);
        Color = _buttonRx.Color;
        OnClick = (EventCallback<MouseEventArgs>)_buttonRx.OnClick;
        Disabled = _buttonRx.Disabled;

        base.OnParametersSet();
    }
}
