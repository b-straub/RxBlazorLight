@inherits MudIconButton
@typeparam T

<MudBadge Visible=@(_buttonRx is not null && _buttonRx.GetFabProgressIcon(StateProvider, IconVariant) != string.Empty)
          Icon=@_buttonRx?.GetFabProgressIcon(StateProvider, IconVariant) Color=@Color Overlap="true" Bordered="true">
    @RenderBase()
</MudBadge>

@code {
    [Parameter, EditorRequired]
    public required IStateProvider<T> StateProvider { get; init; }

    [Parameter]
    public Func<Task<bool>>? ConfirmExecutionAsync { get; init; }

    [Parameter]
    public MBIconVariant? IconVariant { get; set; }

        [Parameter]
    public T? Context { get; set; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);
    private ButtonRx<T>? _buttonRx;

    protected override void OnInitialized()
    {
        _buttonRx = ButtonRx<T>.Create(MBButtonType.ICON, ConfirmExecutionAsync, Color, null, null, null, Context);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(_buttonRx);
        ArgumentNullException.ThrowIfNull(Icon);
        _buttonRx.SetParameter(StateProvider);

        Icon = _buttonRx.GetIconButtonParameters(StateProvider, Icon, IconVariant);

        OnClick = (EventCallback<MouseEventArgs>)_buttonRx.OnClick;
        Disabled = _buttonRx.Disabled;

        base.OnParametersSet();
    }
}
