@inherits MudSelect<T>
@typeparam T

@RenderBase()

@code {
    [Parameter]
    public IInput<T>? RxInput { get; set; }

    [Parameter]
    public T[]? Values { get; set; }

    [Parameter]
    public Func<T, bool> DisabledCallback { get; set; } = _ => false;

    [Parameter]
    public Func<T, bool> HiddenCallback { get; set; } = _ => false;

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(RxInput);

        if (Values is null)
        {
            if (!RxInput.Value.GetType().IsEnum)
            {
                throw new InvalidDataException("Paramter Values must be provided for non enum types!");
            }

            Values = (T[])Enum.GetValues(typeof(T));
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(RxInput);
        ArgumentNullException.ThrowIfNull(Values);

        Value = RxInput.Value;
        Text = ToStringFunc(RxInput.Value);

        ValueChanged = EventCallback.Factory.Create<T>(this, v => RxInput.SetValue(v));
        Disabled = !RxInput.CanChange();

        if (ChildContent is null)
        {
            ChildContent = builder =>
            {
                for (var i = 0; i < Values.Length; i++)
                {
                    if (HiddenCallback(Values[i]))
                    {
                        continue;
                    }

                    builder.OpenComponent(0, typeof(MudSelectItemRx<T>));
                    builder.AddAttribute(1, "Index", i);
                    builder.AddAttribute(2, "Values", Values);
                    builder.AddAttribute(3, "Disabled", DisabledCallback(Values[i]));
                    builder.CloseComponent();
                }
            };
        }

        base.OnParametersSet();
    }
}
