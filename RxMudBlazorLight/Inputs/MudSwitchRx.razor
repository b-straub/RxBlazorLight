@inherits MudSwitch<T>
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required IState<T> RxState { get; init; }

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Value = RxState.Value;
        ValueChanged = EventCallback.Factory.Create<T?>(this, v =>
        {
            if (v is not null && !v.Equals(RxState.Value))
            {
                RxState.Transform(v);
            }
        });
    }

    protected override void OnParametersSet()
    {
        if (RxState.Done())
        {
            Value = RxState.Value;
        }

        Disabled = !RxState.CanTransform(RxState.Value) || RxState.Phase is StateChangePhase.CHANGING;

        base.OnParametersSet();
    }
}
