@inherits MudRadioGroup<T>
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required IStateGroupAsync<T> StateGroupAsync { get; init; }

    [Parameter, EditorRequired]
    public required Func<IStateAsync<T>, T, Task> SelectionChangedAsync { get; init; }

    [Parameter]
    public Func<IStateAsync<T>, bool>? CanChange { get; init; }

    [Parameter]
    public Func<T, bool> DenseCallback { get; set; } = _ => false;

    [Parameter]
    public Func<T, Size> SizeCallback { get; set; } = _ => Size.Medium;

    [Parameter]
    public Func<T, Color> ColorCallback { get; set; } = _ => Color.Default;

    [Parameter]
    public Func<T, Placement> PlacementCallback { get; set; } = _ => Placement.End;

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);

    protected override void OnInitialized()
    {
        ValueChanged = EventCallback.Factory.Create<T>(this, () => StateGroupAsync.ChangeAsync(async s =>
            {
                if (Value is not null)
                {
                    await SelectionChangedAsync(s, Value);
                    s.Value = Value;
                }
            }));

        if (ChildContent is null)
        {
            var values = StateGroupAsync.Items;

            ChildContent = builder =>
            {
                for (var i = 0; i < values.Length; i++)
                {
                    builder.OpenComponent(0, typeof(MudRadioRx<T>));
                    builder.AddAttribute(1, "Index", i);
                    builder.AddAttribute(2, "Values", values);
                    builder.AddAttribute(3, "Dense", DenseCallback(values[i]));
                    builder.AddAttribute(4, "Size", SizeCallback(values[i]));
                    builder.AddAttribute(5, "Color", ColorCallback(values[i]));
                    builder.AddAttribute(6, "Placement", PlacementCallback(values[i]));
                    builder.AddAttribute(7, "Disabled", StateGroupAsync.ItemDisabled(i));
                    builder.AddAttribute(8, "InitialSelection", StateGroupAsync.Value);
                    builder.CloseComponent();
                }
            };
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (StateGroupAsync.Done() && StateGroupAsync.HasValue())
        {
            Value = StateGroupAsync.Value;
        }

        Disabled = (CanChange is not null && !StateGroupAsync.CanChange(CanChange)) || StateGroupAsync.Changing();

        base.OnParametersSet();
    }
}
