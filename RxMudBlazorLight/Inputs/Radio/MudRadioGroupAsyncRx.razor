@inherits MudRadioGroup<T>
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required IStateGroupAsync<T> StateGroupAsync { get; init; }

    [Parameter]
    public Func<T>? InitializeCallback { get; init; }

    [Parameter]
    public Func<T, T, Task>? ChangingAsyncCallback { get; init; }

    [Parameter]
    public Func<bool>? CanChangeCallback { get; init; }

    [Parameter]
    public Func<int, bool> ItemDisabledCallback { get; set; } = _ => false;

    [Parameter]
    public Func<T, bool> DenseCallback { get; set; } = _ => false;

    [Parameter]
    public Func<T, Size> SizeCallback { get; set; } = _ => Size.Medium;

    [Parameter]
    public Func<T, Color> ColorCallback { get; set; } = _ => Color.Default;

    [Parameter]
    public Func<T, Placement> PlacementCallback { get; set; } = _ => Placement.End;

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);

    protected override void OnInitialized()
    {
        if (InitializeCallback is not null)
        {
            StateGroupAsync.Update(InitializeCallback());
        }
       
        ValueChanged = EventCallback.Factory.Create<T>(this, async v =>
        {
            await StateGroupAsync.ChangeValueAsync(v, ChangingAsyncCallback);
        });

        if (ChildContent is null)
        {
            var values = StateGroupAsync.Items;

            ChildContent = builder =>
            {
                for (var i = 0; i < values.Length; i++)
                {
                    builder.OpenComponent(0, typeof(MudRadioRx<T>));
                    builder.AddAttribute(1, "Index", i);
                    builder.AddAttribute(2, "Values", values);
                    builder.AddAttribute(3, "Dense", DenseCallback(values[i]));
                    builder.AddAttribute(4, "Size", SizeCallback(values[i]));
                    builder.AddAttribute(5, "Color", ColorCallback(values[i]));
                    builder.AddAttribute(6, "Placement", PlacementCallback(values[i]));
                    builder.AddAttribute(7, "Disabled", ItemDisabledCallback(i));
                    builder.AddAttribute(8, "InitialSelection", StateGroupAsync.Value);
                    builder.CloseComponent();
                }
            };
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (StateGroupAsync.HasValue())
        {
            Disabled = StateGroupAsync.Disabled || (CanChangeCallback is not null && !CanChangeCallback());

            if (StateGroupAsync.Done())
            {
                Value = StateGroupAsync.Value;
                if (Validation is Func<T, StateValidation> validate)
                {
                    var validation = validate(StateGroupAsync.Value);
                    ErrorText = validation.Message;
                    Error = validation.Error;
                }
            }
        }
        else
        {
            Disabled = true;
        }

        base.OnParametersSet();
    }
}
