@inherits MudSelect<T>
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required IStateGroupAsync<T> StateGroupAsync { get; init; }

    [Parameter]
    public Func<IStateAsync<T>, T, Task>? SelectionChangedAsync { get; init; }

    [Parameter]
    public Func<IStateAsync<T>, bool>? CanChange { get; init; }

    [Parameter]
    public bool HideDisabled { get; set; } = false;

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);

    protected override void OnInitialized()
    {
        ValueChanged = EventCallback.Factory.Create<T>(this, async v =>
        {
            await StateGroupAsync.ChangeAsync(async s =>
            {
                if (SelectionChangedAsync is not null)
                {
                    await SelectionChangedAsync(s, v);
                }
                s.Value = v;
            });
        });

        if (ChildContent is null)
        {
            var values = StateGroupAsync.Items;

            ChildContent = builder =>
            {
                for (var i = 0; i < values.Length; i++)
                {
                    if (HideDisabled && StateGroupAsync.ItemDisabled(i))
                    {
                        continue;
                    }

                    builder.OpenComponent(0, typeof(MudSelectItemRx<T>));
                    builder.AddAttribute(1, "Index", i);
                    builder.AddAttribute(2, "Values", values);
                    builder.AddAttribute(3, "Disabled", StateGroupAsync.ItemDisabled(i));
                    builder.CloseComponent();
                }
            };
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        Disabled = (CanChange is not null && !StateGroupAsync.CanChange(CanChange)) || StateGroupAsync.Changing();
        if (StateGroupAsync.Done() && StateGroupAsync.HasValue())
        {
            Value = StateGroupAsync.Value;
            Text = Value.ToString();
        }

        base.OnParametersSet();
    }
}
