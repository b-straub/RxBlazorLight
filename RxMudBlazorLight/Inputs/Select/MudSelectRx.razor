@inherits MudSelect<T>
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required IStateGroup<T> StateGroup { get; init; }

    [Parameter]
    public Action<IState<T>, T>? SelectionChanged { get; init; }

    [Parameter]
    public Func<IState<T>, bool>? CanChange { get; init; }

    [Parameter]
    public bool HideDisabled { get; set; } = false;

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);

    protected override void OnInitialized()
    {
        ValueChanged = EventCallback.Factory.Create<T>(this, v =>
        {
            StateGroup.Change(s =>
            {
                if (SelectionChanged is not null)
                {
                    SelectionChanged(s, v);
                }
                s.Value = v;
            });
        });

        if (ChildContent is null)
        {
            var values = StateGroup.Items;

            ChildContent = builder =>
            {
                for (var i = 0; i < values.Length; i++)
                {
                    if (HideDisabled && StateGroup.ItemDisabled(i))
                    {
                        continue;
                    }

                    builder.OpenComponent(0, typeof(MudSelectItemRx<T>));
                    builder.AddAttribute(1, "Index", i);
                    builder.AddAttribute(2, "Values", values);
                    builder.AddAttribute(3, "Disabled", StateGroup.ItemDisabled(i));
                    builder.CloseComponent();
                }
            };
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        Disabled = (CanChange is not null && !StateGroup.CanChange(CanChange));
        Value = StateGroup.Value;
        Text = Value?.ToString();
        if (Validation is not null)
        {
            var validate = (Func<IState<T>, StateValidation>)Validation;
            var validation = validate(StateGroup);
            ErrorText = validation.Message;
            Error = validation.Error;
        }

        base.OnParametersSet();
    }
}
