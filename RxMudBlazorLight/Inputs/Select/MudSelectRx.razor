@inherits MudSelect<T>
@typeparam T

@RenderBase()

@code {
    [Parameter, EditorRequired]
    public required IStateGroup<T> StateGroup { get; init; }

    [Parameter]
    public Func<T>? InitializeCallback { get; init; }

    [Parameter]
    public Action<T, T>? ChangingCallback { get; init; }

    [Parameter]
    public Func<bool>? CanChangeCallback { get; init; }

    [Parameter]
    public Func<int, bool> ItemDisabledCallback { get; set; } = _ => false;

    [Parameter]
    public bool HideDisabled { get; set; } = false;

    private RenderFragment RenderBase() => builder => base.BuildRenderTree(builder);

    protected override void OnInitialized()
    {
        if (InitializeCallback is not null)
        {
            StateGroup.Update(InitializeCallback());
        }

        ValueChanged = EventCallback.Factory.Create<T>(this, v =>
        {
            StateGroup.ChangeValue(v, ChangingCallback);
        });

        if (ChildContent is null)
        {
            var values = StateGroup.Items;

            ChildContent = builder =>
                {
                    for (var i = 0; i < values.Length; i++)
                    {
                        if (HideDisabled && ItemDisabledCallback(i))
                        {
                            continue;
                        }

                        builder.OpenComponent(0, typeof(MudSelectItemRx<T>));
                        builder.AddAttribute(1, "Index", i);
                        builder.AddAttribute(2, "Values", values);
                        builder.AddAttribute(3, "Disabled", ItemDisabledCallback(i));
                        builder.CloseComponent();
                    }
                };
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (StateGroup.HasValue())
        {
            Disabled = (CanChangeCallback is not null && !CanChangeCallback());
            Value = StateGroup.Value;
            Text = Value?.ToString();

            if (Validation is Func<T, StateValidation> validate)
            {
                var validation = validate(StateGroup.Value);
                ErrorText = validation.Message;
                Error = validation.Error;
            }
        }
        else
        {
            Disabled = true;
        }

        base.OnParametersSet();
    }
}
