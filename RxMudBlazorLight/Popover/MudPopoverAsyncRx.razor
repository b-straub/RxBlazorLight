<MudPopover Open=@_isOpen OverflowBehavior=@OverflowBehavior.FlipAlways AnchorOrigin=@AnchorOrigin TransformOrigin=@TransformOrigin >
    <MudPaper Class=@_class  Elevation="1" Outlined=@true>
        <MudStack Spacing=@(CancelText is null ? 1 : 3)>
            <MudText Align=@Align.Center Typo=@Typo.button>@Header</MudText>
            @if (ProgressStateObserver.Exception is not null)
            {
                <MudStack Row=@true AlignItems=@AlignItems.Center>
                    <MudText Color=@Color.Error>@ProgressStateObserver.Exception.Message</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick=@(() => _isOpen = false)></MudIconButton>
                </MudStack>
            }
            else
            {
                <MudStack Row=@true AlignItems=@AlignItems.Center>
                    <MudProgressLinear Style="width: 100px" Rounded=@true Color=@Color.Primary Indeterminate=@(ProgressStateObserver.Value < 0) Value=@ProgressStateObserver.Value Size=@Size.Large/>
                    @if (CancelText is not null)
                    {
                        <MudButton Variant=@Variant.Filled Color=@(CancelColor ?? Color.Warning) OnClick=@ProgressStateObserver.Cancel>@CancelText</MudButton>
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color=@(CancelColor ?? Color.Warning) OnClick=@ProgressStateObserver.Cancel></MudIconButton>
                    }
                </MudStack>
            }
        </MudStack>
    </MudPaper>
</MudPopover>

@code {
    [Parameter, EditorRequired]
    public required IStateProgressObserverAsync ProgressStateObserver { get; init; }

    [Parameter, EditorRequired]
    public required string Header { get; init; }
    
    [Parameter]
    public string? CancelText { get; set; }

    [Parameter]
    public Color? CancelColor { get; set; }

    [Parameter]
    public Origin AnchorOrigin { get; set; } = Origin.TopCenter;

    [Parameter]
    public Origin TransformOrigin { get; set; } = Origin.BottomCenter;

    private bool _isOpen;
    private string _class = string.Empty;

    protected override void OnInitialized()
    {
        _class = CancelText is null ? "py-1 px-3" : "py-3 px-3";

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (_isOpen && ProgressStateObserver.Done() && ProgressStateObserver.Phase is not StatePhase.EXCEPTION)
        {
            _isOpen = false;
        }

        if (!_isOpen && ProgressStateObserver.Changing())
        {
            _isOpen = true;
        }

        base.OnParametersSet();
    }
}