@inherits RxBLServiceSubscriber<CrudService>

<MudDialog ContentStyle="width: 400px; height: 400px">
    <DialogContent>
        <EditForm Model=@Scope OnValidSubmit="OnValidSubmit">
            <MudCard>
                <MudCardContent>
                    <MudTextFieldRx State=@Scope.Text Validation=@CrudService.CrudItemInput.ValidateText CanChangeCallback=@Scope.CanUpdateText AutoFocus ="true" Immediate="true" Label="ToDo" />
                    <MudDatePickerRx State=@Scope.DueDateDate Validation=@CrudService.CrudItemInput.ValidateDueDate CanChangeCallback=@Scope.CanUpdateDueDate Label="Due Date" Editable="true" />
                    <MudTimePickerRx PickerVariant=@PickerVariant.Dialog State=@Scope.DueDateTime Validation=@Scope.ValidateDueDateTime CanChangeCallback=@Scope.CanUpdateTime />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Disabled=@(!Scope.CanSubmit()) ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color=@Color.Success Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; init; }

    [Parameter]
    public required CRUDToDoItem? Item { get; init; }

    [NotNull]
    private CrudService.CrudItemInput? Scope { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Scope = Service.CreateItemInput(Item);
        ArgumentNullException.ThrowIfNull(Scope);
        
        var options = MudDialog.Options with
        {
            CloseButton = true
        };
        
        await MudDialog.SetOptionsAsync(options);

        await base.OnInitializedAsync();
    }

    private void OnValidSubmit(EditContext context)
    {
        MudDialog.Close(Scope);
    }
}
