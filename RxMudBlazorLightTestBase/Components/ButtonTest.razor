<PageTitle>ButtonTest</PageTitle>

<MudStack>
    <MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>
    <MudText Typo="Typo.h3" GutterBottom="true">@Service.State.Value?.State</MudText>

    <TimerComponent Name="Gobal" />
    <RxBLServiceScope TScope=@TimerService.TimerScope TService=@TimerService>
        <TimerComponent Name="ButtonTest" />
    </RxBLServiceScope>

    <MudText Class="mb-4">Current count: @Service.Count</MudText>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" RxCommand=@Service.Increment ConfirmExecution=@ConfirmIncrement>Increment</MudButtonRx>
        <MudButtonPRx Color="Color.Primary" Variant="Variant.Filled" Parameter="5" RxCommand=@Service.Add>Add 5</MudButtonPRx>

        <MudButtonAsyncRx Color="Color.Secondary" Variant="Variant.Filled" RxCommandAsync=@Service.IncrementAsync>
            IncrementAsync
        </MudButtonAsyncRx>

        <MudButtonAsyncPRx Color="Color.Secondary" Variant="Variant.Filled" Parameter=2 RxCommandAsync=@Service.AddAsync PrepareExecutionAsync=@DoPrepareAddAsync CancelColor=Color.Error CancelText="Cancel Add">
            AddAsync 2
        </MudButtonAsyncPRx>
    </MudStack>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudMenu Label="Counter Menu">
            <MudMenuItemRx RxCommand=@Service.Increment ConfirmExecution=@ConfirmIncrement>Increment</MudMenuItemRx>
            <MudMenuItemPRx Parameter="5" RxCommand=@Service.Add>Add 5</MudMenuItemPRx>
            <MudMenuItem OnClick=@(() => CmdDialogClick()) OnTouch=@(() => CmdDialogClick())>IncrementAsync</MudMenuItem>
            <MudMenuItem OnClick=@(() => CmdDialogClick(2)) OnTouch=@(() => CmdDialogClick(2))>AddAsync 2</MudMenuItem>
        </MudMenu>
    </MudStack>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudFabRx Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlusOne" RxCommand=@Service.Increment Label="Increment" />
        <MudFabPRx Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Parameter="5" RxCommand=@Service.Add Label="Add 5" />
        <MudFabAsyncRx Color="Color.Secondary" EndIcon="@Icons.Material.Filled.PlusOne" RxCommandAsync=@Service.IncrementAsync Label="IncrementAsync" />
        <MudFabAsyncPRx Color="Color.Secondary" Parameter=2 EndIcon="@Icons.Material.Filled.Add" CancelText="Cancel Add" CancelColor=@Color.Error RxCommandAsync=@Service.AddAsync PrepareExecutionAsync=@DoPrepareAddAsync Label="AddAsync 2" />
        <MudFabAsyncPRx Color="Color.Secondary" Parameter=5 EndIcon="@Icons.Material.Filled.Add" RxCommandAsync=@Service.AddAsync PrepareExecutionAsync=@DoPrepareAddAsync Label="AddAsync 5" />
    </MudStack>

    <RxBLServiceScope TScope=@TestService.SubScope TService=@TestService>
        <IconButtons />
    </RxBLServiceScope>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudSwitchRx RxInput=@Service.AddMode Label="Switch to Add mode" />
        <MudFabAsyncPRx Color="Color.Secondary" Parameter=2 PrepareExecutionAsync=@DoPrepareAddRemoveAsync
                        EndIcon=@(Service.AddMode.Value ? @Icons.Material.Filled.Add : Icons.Material.Filled.Remove)
                        RxCommandAsync=@Service.AddRemoveAsync />
    </MudStack>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick=@(() => CmdDialogClick())>Increment AsyncDialog</MudButton>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick=@(() => CmdDialogClick(10))>Add AsyncDialog 10</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick=@(() => Service.ChangeState("TEST1"))>Change State to Test1</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick=@(() => Service.ChangeState("TEST2"))>Change State to Test2</MudButton>
    </MudStack>

    <MudGrid>
        @if (Service.Exceptions.Any())
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5" GutterBottom="true">@GetExceptions()</MudText>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick=@(() => Service.ResetExceptions())>Reset Exceptions</MudButton>
            </MudItem>
        }
        <MudItem xs="12">
            <MudFabRx Color="Color.Error" StartIcon="@Icons.Material.Filled.ErrorOutline" RxCommand=@Service.Exception Label="New Exception" />
        </MudItem>
    </MudGrid>
</MudStack>

@code {
    [CascadingParameter]
    public required TestService Service { get; init; }

    [Inject]
    public required IDialogService DialogService { get; init; }

    [Inject]
    public required ISnackbar Snackbar { get; init; }

    private async Task<bool> ConfirmIncrement()
    {
        ArgumentNullException.ThrowIfNull(DialogService);

        var parameters = new DialogParameters
            {
                ["Message"] = $"Increment counter?",
                ["ConfirmButton"] = "Increment"
            };

        var dialog = DialogService.Show<ConfirmDialog>("Counter", parameters);

        var res = await dialog.Result;

        if (res.Canceled)
        {
            return false;
        }

        return true;
    }

    private async Task<bool> DoPrepareAddAsync(ICommandAsync<int> cmd, CancellationToken token)
    {
        ArgumentNullException.ThrowIfNull(DialogService);
        var parameter = Math.Abs(cmd.Parameter) * 2;

        var parameters = new DialogParameters
            {
                ["Message"] = $"Add {cmd.Parameter} * 2 to counter?",
                ["ConfirmButton"] = "Add"
            };

        var dialog = DialogService.Show<ConfirmDialog>("Counter", parameters);

        var res = await dialog.Result;

        if (res.Canceled)
        {
            return false;
        }

        cmd.SetParameter(parameter);

        return true;
    }

    private async Task<bool> CmdDialogClick(int? parameter = null)
    {
        if (parameter is null)
        {
            return await DialogAsyncRx.Show(DialogService, Service.IncrementAsync,
                "Increment", "Increment counter.", "Increment", "Cancel", false);
        }

        return await DialogAsyncPRx<int>.Show(DialogService, Service.AddAsync, (int)(parameter!),
            $"Add {parameter}", $"Add {parameter} to counter?", $"Add {parameter}", "Cancel", true, "Cancel adding!", Color.Error);
    }

    private async Task<bool> DoPrepareAddRemoveAsync(ICommandAsync<int> cmd, CancellationToken token)
    {
        var config = (SnackbarOptions options) =>
        {
            options.VisibleStateDuration = int.MaxValue;
            options.HideIcon = false;
        };

        const string sbKey = "AddRemoveSB";

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add($"Preparing AddRemove!", Severity.Info, config, sbKey);

        try
        {
            await Task.Delay(2000, token);
        }
        finally
        {
            Snackbar.RemoveByKey(sbKey);
        }

        var value = Math.Abs(Service.Count) * 5;

        if (value > 100 && Service.AddMode.Value)
        {
            return false;
        }

        cmd.SetParameter(value);

        return true;
    }

    private string GetExceptions()
    {
        return Service.Exceptions.Aggregate("", (p, n) => p + n.Message + ", ").TrimEnd(new[] { ' ', ',' });
    }
}
