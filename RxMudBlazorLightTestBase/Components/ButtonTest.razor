@inherits RxBLServiceSubscriber<TestService>

<PageTitle>ButtonTest</PageTitle>

<MudStack>
    <MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>
    <MudText Typo="Typo.h3" GutterBottom="true">@Service.ServiceState.State</MudText>

    <TimerComponent Name="Gobal" />
    <RxBLStateScope TScope=@TimerService.TimerStateScope TService=@TimerService ScopeFactory=@TimerService.CreateScope>
        <TimerComponent Name="ButtonTest" />
    </RxBLStateScope>

    <MudText Class="mb-4">Current count: @Service.Counter</MudText>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" StateCommand=@Service.CounterCMD ChangeState=@Service.IncrementCounter CanChange=@Service.IncrementStateCanChange ConfirmExecutionAsync=@ConfirmIncrement>Increment</MudButtonRx>
        <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" StateCommand=@Service.CounterCMD ChangeState=@(Service.AddToCounter(5))>Add 5</MudButtonRx>
        <MudButtonAsyncRx Color="Color.Secondary" Variant="Variant.Filled" StateCommand=@Service.CounterCMDAsync ChangeStateAsync=@Service.IncrementCounterAsync CanChange=@Service.IncrementStateCanChange>IncrementAsync</MudButtonAsyncRx>
        <MudButtonAsyncCancelRx Color="Color.Secondary" Variant="Variant.Filled" StateCommand=@Service.CounterCMDAsync ChangeStateAsync=@(Service.AddToCounterAsync(2)) CanChange=@(Service.CounterCanChangeLowerBound(4)) CancelText="Cancel Increment">Add Async 2</MudButtonAsyncCancelRx>
        <MudButtonAsyncCancelRx Color="Color.Secondary" Variant="Variant.Filled" StateCommand=@Service.CounterCMDAsync ChangeStateAsync=@DoPrepareAddAsync DeferredNotification=@true CancelColor=Color.Error CancelText="Cancel Add">
            AddWithConfirmAsync 10
        </MudButtonAsyncCancelRx>
    </MudStack>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudMenu Label="Counter Menu">
            <MudMenuItemRx StateCommand=@Service.CounterCMD ChangeState=@Service.IncrementCounter ConfirmExecutionAsync=@ConfirmIncrement>Increment</MudMenuItemRx>
            <MudMenuItemRx StateCommand=@Service.CounterCMD ChangeState=@(Service.AddToCounter(5))>Add 5</MudMenuItemRx>
            <MudMenuItemAsyncRx StateCommand=@Service.CounterCMDAsync ChangeStateAsync=@Service.IncrementCounterAsync>IncrementAsync</MudMenuItemAsyncRx>
            <MudMenuItem OnClick=@(() => CmdDialogClick()) OnTouch=@(() => CmdDialogClick())>Dialog IncrementAsync</MudMenuItem>
            <MudMenuItem OnClick=@(() => CmdDialogClick(2)) OnTouch=@(() => CmdDialogClick(2))>Dialog AddAsync 2</MudMenuItem>
        </MudMenu>
    </MudStack>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudSwitchRx State=@Service.CanIncrementCheck Label="Allow Increment" />
        <MudFabRx Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlusOne" StateCommand=@Service.CounterCMD ChangeState=@Service.IncrementCounter CanChange=@Service.IncrementStateCanChangeCheck Label="Increment" />
        <MudFabRx Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" StateCommand=@Service.CounterCMD ChangeState=@(Service.AddToCounter(5)) Label="Add 5" />
        <MudFabAsyncRx Color="Color.Secondary" EndIcon="@Icons.Material.Filled.PlusOne" StateCommand=@Service.CounterCMDAsync ChangeStateAsync=@Service.IncrementCounterAsync Label="IncrementAsync" />
        <MudFabAsyncCancelRx Color="Color.Secondary" EndIcon="@Icons.Material.Filled.Add" StateCommand=@Service.CounterCMDAsync ChangeStateAsync=@(Service.AddToCounterAsync(2)) CanChange=@(Service.CounterCanChangeLowerBound(4)) Label="Add Async 2" />
        <MudFabAsyncCancelRx Color="Color.Secondary" EndIcon="@Icons.Material.Filled.Add" StateCommand=@Service.CounterCMDAsync ChangeStateAsync=@DoPrepareAddAsync DeferredNotification=@true CancelText="Cancel Add" CancelColor=@Color.Error Label="AddAsync 2" />
    </MudStack>

    <RxBLStateScope TScope=@TestService.Scope TService=@TestService ScopeFactory=@Service.CreateScope>
        <IconButtons />
    </RxBLStateScope>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudSwitchRx State=@Service.AddMode CanChange=@Service.AddModeCanChange Label="Switch to Add mode" />
        <MudFabAsyncCancelRx Color="Color.Secondary" StateCommand=@Service.CounterCMDAsync ChangeStateAsync=@DoPrepareAddRemoveAsync
                       EndIcon=@(Service.AddMode.Value ? @Icons.Material.Filled.Add : Icons.Material.Filled.Remove) CancelText="Cancel AddRemove" CancelColor=@Color.Error />
    </MudStack>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick=@(() => CmdDialogClick())>Increment AsyncDialog</MudButton>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick=@(() => CmdDialogClick(10))>Add AsyncDialog 10</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick=@(() => Service.ChangeServiceState("Test1"))>Change State to Test1</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick=@(() => Service.ChangeServiceState("Test2"))>Change State to Test2</MudButton>
    </MudStack>

    <MudGrid>
        @if (Service.Exceptions.Any())
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5" GutterBottom="true">@GetExceptions()</MudText>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick=@(() => Service.ResetExceptions())>Reset Exceptions</MudButton>
            </MudItem>
        }
        <MudItem xs="12">
            <MudFabRx Color="Color.Error" StartIcon="@Icons.Material.Filled.ErrorOutline" StateCommand=@Service.CounterCMD ChangeState=@TestService.CounterException Label="New Exception" />
        </MudItem>
    </MudGrid>
</MudStack>

@code {
    [Inject]
    public required TimerService TimerService { get; init; }

    [Inject]
    public required IDialogService DialogService { get; init; }

    [Inject]
    public required ISnackbar Snackbar { get; init; }

    private async Task<bool> ConfirmIncrement()
    {
        ArgumentNullException.ThrowIfNull(DialogService);

        var parameters = new DialogParameters
            {
                ["Message"] = $"Increment counter?",
                ["ConfirmButton"] = "Increment"
            };

        var dialog = DialogService.Show<ConfirmDialog>("Counter", parameters);

        var res = await dialog.Result;

        if (res.Canceled)
        {
            return false;
        }

        return true;
    }

    private async Task DoPrepareAddAsync(CancellationToken ct)
    {
        ArgumentNullException.ThrowIfNull(DialogService);
        var value = 2;

        var parameters = new DialogParameters
            {
                ["Message"] = $"Add {value} to counter?",
                ["ConfirmButton"] = "Add"
            };

        var dialog = DialogService.Show<ConfirmDialog>("Counter", parameters);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            Service.CounterCMDAsync.NotifyChanging();
            await Task.Delay(4000, ct);
            Service.Counter = value;
        }
    }

    private async Task<bool> CmdDialogClick(int? parameter = null)
    {
        if (parameter is null)
        {
            return await DialogRx<TestService>.Show(DialogService, Service.CounterCMD, Service.IncrementCounter,
                "Increment", "Increment counter.", "Increment", "Cancel", false);
        }

        return await DialogAsyncRx<TestService>.Show(DialogService, Service.CounterCMDAsync, Service.AddToCounterAsync((int)parameter),
            $"Add {parameter}", $"Add {parameter} to counter?", $"Add {parameter}", "Cancel", true, "Cancel adding!", Color.Error);
    }

    private async Task DoPrepareAddRemoveAsync(CancellationToken ct)
    {
        var config = (SnackbarOptions options) =>
        {
            options.VisibleStateDuration = int.MaxValue;
            options.HideIcon = false;
        };

        const string sbKey = "AddRemoveSB";

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add($"Preparing AddRemove!", Severity.Info, config, sbKey);

        try
        {
            await Task.Delay(2000, ct);
        }
        finally
        {
            Snackbar.RemoveByKey(sbKey);
        }

        var value = Math.Abs(Service.Counter) * 5;

        if (!Service.AddMode.Value)
        {
            value = -value;
        }

        Service.Counter += value;
    }

    private string GetExceptions()
    {
        return Service.Exceptions.Aggregate("", (p, n) => p + $"{n.Exception.Message} - {n.ID}, ").TrimEnd(new[] { ' ', ',' });
    }
}
