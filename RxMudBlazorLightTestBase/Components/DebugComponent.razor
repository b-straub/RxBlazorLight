<PageTitle>Debug</PageTitle>

<MudStack>
    <MudText Class="mb-4">Current count: @Service.CountState.Value</MudText>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" StateProvider=@Service.Increment>Increment</MudButtonRx>
        <MudButtonPRx Color="Color.Secondary" Variant="Variant.Filled" StateTransformer=@Service.AddAsync ValueFactoryAsync=@DoPrepareAddAsync CancelColor=Color.Error CancelText="Cancel Add">
            AddAsync 10
        </MudButtonPRx>
        <MudFabPRx Color="Color.Secondary" EndIcon="@Icons.Material.Filled.Add" StateTransformer=@Service.AddAsync ValueFactoryAsync=@DoPrepareAddAsync Label="AddAsync 10" />
    </MudStack>
</MudStack>

@code {
    [CascadingParameter]
    public required TestService Service { get; init; }

    [Inject]
    public required IDialogService DialogService { get; init; }

    private async Task DoPrepareAddAsync(IStateTransformer<int> st)
    {
        ArgumentNullException.ThrowIfNull(DialogService);
        var value = 10;

        var parameters = new DialogParameters
            {
                ["Message"] = $"Add {value} to counter?",
                ["ConfirmButton"] = "Add"
            };

        var dialog = DialogService.Show<ConfirmDialog>("Counter", parameters);

        var res = await dialog.Result;

        if (res.Canceled)
        {
            return;
        }

        st.Transform(value);
    }
}
