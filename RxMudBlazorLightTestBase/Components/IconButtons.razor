@inherits RxBLServiceSubscriber<TestService>

<MudStack Row=@true AlignItems=@AlignItems.Center>
    <MudIconButtonRx Color="Color.Primary" Icon="@Icons.Material.Filled.PlusOne" StateCommand=@Service.Command ExecuteCallback=@Service.IncrementCounter/>
    <MudIconButtonRx Color="Color.Primary" Icon="@Icons.Material.Filled.Add" StateCommand=@Service.Command ExecuteCallback=@(Service.AddToCounter(5))/>
    <MudIconButtonAsyncRx Color="Color.Secondary" Icon="@Icons.Material.Filled.PlusOne" StateCommand=@Service.CommandAsync ExecuteAsyncCallback=@Service.IncrementCounterAsync CanChangeCallback=@(Service.CounterCanChangeLowerBound(4))/>
    <MudIconButtonAsyncRx Color="Color.Secondary" Icon=@GetAddModeIcon() StateCommand=@Service.CommandAsync ExecuteAsyncCallback=@Service.ToggleAddModeDelayedAsync />
</MudStack>

<MudStack>
    <MudStack>
        <MudText Class="mb-4">Current count: @Scope.Counter</MudText>
    </MudStack>

    <MudStack Row=@true AlignItems=@AlignItems.Center>
        <MudIconButtonRx Color="Color.Secondary" Variant=@Variant.Filled Icon="@Icons.Material.Filled.Add" StateCommand=@Scope.Command ExecuteCallback=@(TestService.IncrementCounterIndirect(Scope.Counter, v => Scope.Counter = v))/>
        <MudIconButtonAsyncRx Color="Color.Secondary" Variant=@Variant.Filled Icon="@Icons.Material.Filled.Add" StateCommand=@Scope.CommandAsync ExecuteAsyncCallback=@Scope.IncrementCounterAsync/>
        <MudIconButtonAsyncRx Color="Color.Secondary" Variant=@Variant.Filled Icon="@Icons.Material.Filled.Add" StateCommand=@Scope.CancellableCommandAsync ExecuteAsyncCallback=@(Scope.AddToCounterAsync(5))/>
    </MudStack>
</MudStack>

@code {

    [CascadingParameter]
    public required TestService.Scope Scope { get; init; }

    private string GetAddModeIcon()
    {
        return Service.AddMode.Value ? Icons.Material.Filled.ExposurePlus1 : Icons.Material.Filled.ExposureNeg1;
    }
}