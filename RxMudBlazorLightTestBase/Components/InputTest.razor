@inherits RxBLServiceSubscriber<TestService>

<PageTitle>InputTest</PageTitle>

<MudStack AlignItems="AlignItems.Center">
    <MudText Typo="Typo.h3" GutterBottom="true">@($"InputTest {Service.TextValue.Value} / {Service.GetRadio().Value} / {Service.RatingValue.Value}")</MudText>
    <TimerComponent Name="Gobal" />
    <RxBLStateScope TScope=@TimerService.TimerStateScope TService=@TimerService ScopeFactory=@TimerService.CreateScope>
        <TimerComponent Name="InputTest" />
    </RxBLStateScope>

    <MudText Class="mb-4">Current count: @Service.Counter</MudText>

    <MudImage @bind-Src=@_imageSrc Height="50" />

    <MudRadioGroupRx StateGroup=@Service.GetRadio() ChangingCallback=@TestService.ChangeTestColor ItemDisabledCallback=@Service.ColorDisabled DenseCallback=@DenseCallback ColorCallback=@ColorCallback SizeCallback=@(_ => Size.Large) PlacementCallback=@(_ => Placement.Start) />
    <MudSelectRx StateGroup=@Service.GetRadio() ChangingCallback=@TestService.ChangeTestColor ItemDisabledCallback=@Service.ColorDisabled HideDisabled=@true />

    <MudSelectRx StateGroup=@Service.GetRadio() ChangingCallback=@TestService.ChangeTestColor ItemDisabledCallback=@Service.ColorDisabled Variant ="Variant.Outlined">
        <MudSelectItem Value=@Service.GetRadio().Items[0]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/Solid_red.svg/1024px-Solid_red.svg.png?20150316143248" height="14" class="mr-1" /> Red
        </MudSelectItem>
        <MudSelectItem Value=@Service.GetRadio().Items[1]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Solid_green.svg/1024px-Solid_green.svg.png?20150316143636" height="14" class="mr-1" /> Green
        </MudSelectItem>
        <MudSelectItem Value=@Service.GetRadio().Items[2]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Solid_blue.svg/1024px-Solid_blue.svg.png?20150316143734" height="14" class="mr-1" /> Blue
        </MudSelectItem>
    </MudSelectRx>

    <MudRadioGroupRx StateGroup=@Service.GetPizzas1() InitializeCallback=@(() => new("Spinaci")) ChangingCallback=@(TestService.ChangePizza("Radio")) />
    <MudSelectRx StateGroup=@Service.GetPizzas1() InitializeCallback=@(() => new("Diavolo")) ChangingCallback=@(TestService.ChangePizza("Select")) HideDisabled=@true />

    <MudRadioGroupAsyncRx StateGroupAsync=@Service.GetPizzas2() ChangingAsyncCallback=@TestService.ChangePizzaAsync />
    <MudSelectAsyncRx StateGroupAsync=@Service.GetPizzas2() ChangingAsyncCallback=@TestService.ChangePizzaAsync HideDisabled=@true />

    <MudRatingRx State=@Service.RatingValue />
    <MudRatingRx State=@Service.RatingValue />
    <MudSwitchRx State=@Service.CanIncrementCheck Label="Allow Increment" />
    <MudCheckBoxRx State=@Service.CanIncrementCheck Label="Allow Increment" />
    <MudToggleIconButtonRx State=@Service.CanIncrementCheck Icon="@Icons.Material.Outlined.Circle" Color="@Color.Error" Title="Off"
              ToggledIcon="@Icons.Material.Outlined.CheckCircle" ToggledColor="@Color.Success" ToggledTitle="On" />
    <span>CanIncrementCheck is @(Service.CanIncrementCheck.Value ? "On" : "Off")</span>
    <MudNumericFieldRx State=@Service.NumericState Label="" Variant="Variant.Text" Min="0" Max="50" />
    <MudSliderRx State=@Service.NumericState Variant="Variant.Text" Min="0" Max="50" Immediate=@false CanChangeCallback=@(() => Service.NumericState.Value < 20)>IncrementValue</MudSliderRx>
    <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" StateCommand=@Service.Command ExecuteCallback=@(Service.AddToCounter(5))>Add 5</MudButtonRx>
    <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" StateCommand=@Service.Command ExecuteCallback=@(Service.AddToCounter(Service.Counter))>Add Count</MudButtonRx>

    <MudTextFieldRx State=@Service.TextValue Label="Text Test" Immediate=@true />
    <MudTextFieldRx State=@Service.TextValue Label="Text Test clone" Immediate=@true />
    <MudAutocompleteRx State=@Service.TextValue SearchFunc=@Search Label="Autocomplete" Immediate=@true />

    <RxBLStateScope TScope=@TestService.ColorsStateScope TService=@TestService ScopeFactory=@Service.CreateColorsScope>
        <ColorsScopedGroup Context=1 />
    </RxBLStateScope>

    <RxBLStateScope TScope=@TestService.ColorsStateScope TService=@TestService ScopeFactory=@Service.CreateColorsScope>
        <ColorsScopedGroup Context=0 />
        <ColorsScopedGroup Context=1 />
    </RxBLStateScope>

    <MudGrid>
        @if (Service.Exceptions.Any())
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5" GutterBottom="true">@GetExceptions()</MudText>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick=@(() => Service.ResetExceptions())>Reset Exceptions</MudButton>
            </MudItem>
        }
    </MudGrid>
</MudStack>

@code {
    [Inject]
    public required TimerService TimerService { get; init; }

    private string _imageSrc = "https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetImageSource();
    }

    protected override async Task OnServiceStateHasChangedAsync(ServiceChangeReason cr)
    {
        if (cr.ID == Service.CanIncrementCheck.ID)
        {
            await Task.Delay(100);
            SetImageSource();
        }
    }

    private void SetImageSource()
    {
        _imageSrc = Service.CanIncrementCheck.Value ? "https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg" :
                   "https://upload.wikimedia.org/wikipedia/commons/4/4b/Flag_of_Sweden_fixed.svg";
    }

    private bool DenseCallback(TestColor v)
    {
        return v.Color switch
        {
            ColorEnum.BLUE => true,
            _ => false
        };
    }

    private Color ColorCallback(TestColor v)
    {
        return v.Color switch
        {
            ColorEnum.RED => Color.Error,
            ColorEnum.GREEN => Color.Success,
            _ => Color.Primary
        };
    }


    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string GetExceptions()
    {
        return Service.Exceptions.Aggregate("", (p, n) => p + $"{n.Exception.Message} - {n.ID}, ").TrimEnd(new[] { ' ', ',' });
    }
}