@inherits RxBLServiceChangeSubscriber<TestService>

<PageTitle>InputTest</PageTitle>

<MudStack AlignItems="AlignItems.Center">
    <MudText Typo="Typo.h3" GutterBottom="true">@($"InputTest {Service.TextValue.Value} / {Service.GetRadio().Value} / {Service.RatingValue.Value}")</MudText>
    <TimerComponent Name="Gobal" />
    <RxBLServiceScope TScope=@TimerService.TimerScope TService=@TimerService>
        <TimerComponent Name="InputTest" />
    </RxBLServiceScope>
    <MudText Class="mb-4">Current count: @Service.CountState.Value</MudText>
    <MudButton Disabled=@(!Service.IncrementState.Changing()) Color="Color.Error" Variant="Variant.Filled" OnClick=@(() => Service.IncrementState.Cancel())>Cancel Increment Change</MudButton>

    <MudImage @bind-Src=@_imageSrc Height="50" />

    <MudRadioGroupRx RxStateGroup=@Service.GetRadio() DenseCallback=@DenseCallback ColorCallback=@ColorCallback SizeCallback=@(_ => Size.Large) PlacementCallback=@(_ => Placement.Start) />
    <MudSelectRx RxStateGroup=@Service.GetRadio() />

    <MudSelectRx RxStateGroup=@Service.GetRadio() Variant="Variant.Outlined">
        <MudSelectItem Value=@Service.GetRadio().GetItems()[0]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/Solid_red.svg/1024px-Solid_red.svg.png?20150316143248" height="14" class="mr-1" /> Red
        </MudSelectItem>
        <MudSelectItem Value=@Service.GetRadio().GetItems()[1]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Solid_green.svg/1024px-Solid_green.svg.png?20150316143636" height="14" class="mr-1" /> Green
        </MudSelectItem>
        <MudSelectItem Value=@Service.GetRadio().GetItems()[2]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Solid_blue.svg/1024px-Solid_blue.svg.png?20150316143734" height="14" class="mr-1" /> Blue
        </MudSelectItem>
    </MudSelectRx>

    <MudRadioGroupRx RxStateGroup=@Service.GetPizzas1() />
    <MudSelectRx RxStateGroup=@Service.GetPizzas1() HideDisabled=@true />

    <MudRadioGroupRx RxStateGroup=@Service.GetPizzas2() />
    <MudSelectRx RxStateGroup=@Service.GetPizzas2() HideDisabled=@true />

    <MudRatingRx RxState=@Service.RatingValue />
    <MudRatingRx RxState=@Service.RatingValue />
    <MudSwitchRx RxState=@Service.CanIncrementCheck Label="Allow Increment" />
    <MudCheckBoxRx RxState=@Service.CanIncrementCheck Label="Allow Increment" />
    <MudToggleIconButtonRx RxState=@Service.CanIncrementCheck Icon="@Icons.Material.Outlined.Circle" Color="@Color.Error" Title="Off"
                            ToggledIcon="@Icons.Material.Outlined.CheckCircle" ToggledColor="@Color.Success" ToggledTitle="On" />
    <span>CanIncrementCheck is @(Service.CanIncrementCheck.Value ? "On" : "Off")</span>
    <MudNumericFieldRx RxState=@Service.IncrementState Label="" Variant="Variant.Text" Min="0" Max="50" />
    <MudSliderRx RxState=@Service.IncrementState Variant="Variant.Text" Min="0" Max="50" Immediate=@false>IncrementValue</MudSliderRx>
    <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" StateProvider=@Service.Increment>Add Direct</MudButtonRx>
    <MudButtonPRx Color="Color.Primary" Variant="Variant.Filled" ValueFactoryAsync=@DVFA.Factory(Service.IncrementState.Value) StateTransformer=@Service.Add>Add</MudButtonPRx>

    <MudTextFieldRx RxState=@Service.TextValue Label="Text Test" Immediate=@true />
    <MudTextFieldRx RxState=@Service.TextValue Label="Text Test clone" Immediate=@true />
    <MudAutocompleteRx RxState=@Service.TextValue SearchFunc=@Search Label="Autocomplete" Immediate=@true />

    <MudGrid>
        @if (Service.Exceptions.Any())
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h5" GutterBottom="true">@GetExceptions()</MudText>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick=@(() => Service.ResetExceptions())>Reset Exceptions</MudButton>
            </MudItem>
        }
    </MudGrid>
</MudStack>

@code {
    private string _imageSrc = "https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetImageSource();
    }

    protected override void ServiceStateHasChanged(Guid id, ChangeReason changeReason)
    {
        if (id == Service.CanIncrementCheck.ID && Service.CanIncrementCheck.Changed())
        {
            SetImageSource();
        }
    }

    private void SetImageSource()
    {
        _imageSrc = Service.CanIncrementCheck.Value ? "https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg" :
                   "https://upload.wikimedia.org/wikipedia/commons/4/4b/Flag_of_Sweden_fixed.svg";
    }

    private bool DenseCallback(TestColor v)
    {
        return v.Color switch
        {
            ColorEnum.BLUE => true,
            _ => false
        };
    }

    private Color ColorCallback(TestColor v)
    {
        return v.Color switch
        {
            ColorEnum.RED => Color.Error,
            ColorEnum.GREEN => Color.Success,
            _ => Color.Primary
        };
    }


    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string GetExceptions()
    {
        return Service.Exceptions.Aggregate("", (p, n) => p + $"{n.Exception.Message} - {n.ID}, ").TrimEnd(new[] { ' ', ',' });
    }
}