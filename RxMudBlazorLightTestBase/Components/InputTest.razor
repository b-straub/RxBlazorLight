@implements IDisposable
<PageTitle>InputTest</PageTitle>

<MudStack AlignItems="AlignItems.Center">
    <MudText Typo="Typo.h3" GutterBottom="true">@($"InputTest {Service.TextValue.Value} / {Service.GetRadio().Value} / {Service.RatingValue.Value}")</MudText>
    <TimerComponent Name="Gobal" />
    <RxBLServiceScope TScope=@TimerService.TimerScope TService=@TimerService>
        <TimerComponent Name="InputTest" />
    </RxBLServiceScope>
    <MudText Class="mb-4">Current count: @Service.Count</MudText>
    <MudImage @bind-Src=@_imageSrc Height="50" />

    <MudRadioGroupRx RxInputGroup=@Service.GetRadio() DenseCallback=@DenseCallback ColorCallback=@ColorCallback SizeCallback=@(_ => Size.Large) PlacementCallback=@(_ => Placement.Start) />
    <MudSelectRx RxInputGroup=@Service.GetRadio() />

    <MudSelectRx RxInputGroup=@Service.GetRadio() Variant="Variant.Outlined">
        <MudSelectItem Value=@Service.GetRadio().GetItems()[0]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/Solid_red.svg/1024px-Solid_red.svg.png?20150316143248" height="14" class="mr-1" /> Red
        </MudSelectItem>
        <MudSelectItem Value=@Service.GetRadio().GetItems()[1]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Solid_green.svg/1024px-Solid_green.svg.png?20150316143636" height="14" class="mr-1" /> Green
        </MudSelectItem>
        <MudSelectItem Value=@Service.GetRadio().GetItems()[2]>
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Solid_blue.svg/1024px-Solid_blue.svg.png?20150316143734" height="14" class="mr-1" /> Blue
        </MudSelectItem>
    </MudSelectRx>

    <MudRadioGroupRx RxInputGroup=@Service.GetPizzas1() />
    <MudSelectRx RxInputGroup=@Service.GetPizzas1() HideDisabled=@true />

    <MudRadioGroupRx RxInputGroup=@Service.GetPizzas2() />
    <MudSelectRx RxInputGroup=@Service.GetPizzas2() HideDisabled=@true />

    <MudRatingRx RxInput=@Service.RatingValue />
    <MudRatingRx RxInput=@Service.RatingValue />
    <MudSwitchRx RxInput=@Service.CanIncrementCheck Label="Allow Increment" />
    <MudCheckBoxRx RxInput=@Service.CanIncrementCheck Label="Allow Increment" />
    <MudToggleIconButtonRx RxInput=@Service.CanIncrementCheck Icon="@Icons.Material.Outlined.Circle" Color="@Color.Error" Title="Off"
                            ToggledIcon="@Icons.Material.Outlined.CheckCircle" ToggledColor="@Color.Success" ToggledTitle="On" />
    <span>CanIncrementCheck is @(Service.CanIncrementCheck.Value ? "On" : "Off")</span>
    <MudNumericFieldRx RxInput=@Service.IncrementValue Label="" Variant="Variant.Text" Min="0" Max="50" />
    <MudSliderRx RxInput=@Service.IncrementValue Variant="Variant.Text" Min="0" Max="50" Immediate=@false>IncrementValue</MudSliderRx>
    <MudButtonRx Color="Color.Primary" Variant="Variant.Filled" RxCommand=@Service.AddIncrementValue>Add Direct</MudButtonRx>
    <MudButtonPRx Color="Color.Primary" Variant="Variant.Filled" Parameter=Service.IncrementValue.Value RxCommand=@Service.Add>Add</MudButtonPRx>

    <MudText Typo="Typo.h5" GutterBottom="true">@($"Simple CMD executions {_simpleExecutions}")</MudText>
    <MudButtonRx Color="Color.Error" Variant="Variant.Filled" RxCommand=@Service.Simple>Simple CMD</MudButtonRx>
    <MudTextFieldRx RxInput=@Service.TextValue Label="Text Test" Immediate=@true />
    <MudTextFieldRx RxInput=@Service.TextValue Label="Text Test clone" Immediate=@true />
    <MudAutocompleteRx RxInput=@Service.TextValue SearchFunc=@Search Label="Autocomplete" Immediate=@true />
</MudStack>

    @code {
    [CascadingParameter]
    public required TestService Service { get; init; }

    private string _imageSrc = "https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg";
    private CompositeDisposable _disposeBag = new();
    private long _simpleExecutions = 0;

    protected override void OnInitialized()
    {
        _disposeBag.Add(Service.CanIncrementCheck.Subscribe(val =>
        {
            _imageSrc = val ? "https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg" :
                "https://upload.wikimedia.org/wikipedia/commons/4/4b/Flag_of_Sweden_fixed.svg";
        }));

        _disposeBag.Add(Service.Simple.Subscribe(cs =>
        {
            if (cs is CommandState.EXECUTED)
            {
                _simpleExecutions++;
            }
            StateHasChanged();
        }));

        base.OnInitialized();
    }

    private bool DenseCallback(TestColor v)
    {
        return v.Color switch
        {
            ColorEnum.BLUE => true,
            _ => false
        };
    }

    private Color ColorCallback(TestColor v)
    {
        return v.Color switch
        {
            ColorEnum.RED => Color.Error,
            ColorEnum.GREEN => Color.Success,
            _ => Color.Primary
        };
    }


    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public void Dispose()
    {
        _disposeBag.Dispose();
    }
}