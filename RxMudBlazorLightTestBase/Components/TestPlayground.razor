@implements IDisposable

<MudStack AlignItems="AlignItems.Center">
    <MudText Typo="Typo.h3" GutterBottom="true">@($"InputTest {Service.TextValue.Value} / {Service.GetRadio().Value} / {Service.RatingValue.Value}")</MudText>
    <TimerComponent />
    <MudText id="result" Class="mb-4">Current count: @Service.Count</MudText>
    <MudRadioGroupAsyncRx id="radio" RxInputGroupAsyncFactory=@Service.GetPizzaInputAsync />
    <MudButtonRx id="button1" Color=" Color.Primary" Variant="Variant.Filled" RxCommandFactory=@(() => Service.Increment)>Increment</MudButtonRx>
    <MudButtonPRx id="button2" Color="Color.Primary" Variant="Variant.Filled" Parameter="5" RxCommandFactory=@(() => Service.Add)>Add</MudButtonPRx>
    <MudText Typo="Typo.h5" GutterBottom="true">@($"Equals executions {_equalsExecutions}")</MudText>
    <MudButtonPRx Color="Color.Error" Variant="Variant.Filled" Parameter=@GetEqualsParameter() RxCommandFactory=@(() => Service.EqualsTest)>EqualsTest</MudButtonPRx>
    <MudText Typo="Typo.h5" GutterBottom="true">@($"Equals async executions {_equalsAsyncExecutions}")</MudText>
    <MudButtonAsyncPRx Color="Color.Error" Variant="Variant.Filled" Parameter="1" RxCommandAsyncFactory=@(() => Service.EqualsTestAsync)>EqualsTest</MudButtonAsyncPRx>

    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick=@(() => _showNestedTimer = !_showNestedTimer)>Throw nested RxServiceException</MudButton>
    @if (_showNestedTimer)
    {
        <RxBLServiceContext TService=@TimerService>
            <TimerComponent />
        </RxBLServiceContext>
    }
    <MudGrid>
        @if (TimerService.Exceptions.Any())
        {
            _showNestedTimer = false;
            <MudItem xs="12">
                <MudText Typo="Typo.h5" GutterBottom="true">@GetExceptions()</MudText>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick=@(() => TimerService.ResetExceptions())>Reset Exceptions</MudButton>
            </MudItem>
        }
    </MudGrid>
</MudStack>

@code {
    [CascadingParameter]
    public required TestService Service { get; init; }

    [CascadingParameter]
    public required TimerService TimerService { get; init; }

    private long _equalsExecutions = 0;
    private long _equalsAsyncExecutions = 0;

    private CompositeDisposable _disposeBag = new();
    private bool _showNestedTimer = false;

    protected override void OnInitialized()
    {
        _disposeBag.Add(Service.EqualsTest.Subscribe(cs =>
       {
           if (cs is CommandState.EXECUTED)
           {
               _equalsExecutions++;
           }
           StateHasChanged();
       }));

        _disposeBag.Add(Service.EqualsTestAsync.Subscribe(cs =>
        {
            if (cs is CommandState.EXECUTED)
            {
                _equalsAsyncExecutions++;
            }
            StateHasChanged();
        }));

        base.OnInitialized();
    }

    private int GetEqualsParameter()
    {
        return _equalsExecutions == 0 ? 1 : 2;
    }

    private void Clicked()
    {
        Service.Increment.Execute();
    }

    public void Dispose()
    {
        _disposeBag.Dispose();
    }

    private string GetExceptions()
    {
        return TimerService.Exceptions.Aggregate("", (p, n) => p + n.Message + ", ").TrimEnd(new[] { ' ', ',' });
    }
}