@inherits RxBLServiceChangeSubscriber<TestService>

<PageTitle>TestPlayground</PageTitle>

<MudStack AlignItems="AlignItems.Center">
    <MudText Typo="Typo.h3" GutterBottom="true">@($"InputTest {Service.TextValue.Value} / {Service.GetRadio().Value} / {Service.RatingValue.Value}")</MudText>
    <TimerComponent Name="Gobal" />
    <RxBLServiceScope TScope=@TimerService.TimerScope TService=@TimerService>
        <TimerComponent Name="TestPlayground" />
    </RxBLServiceScope>
    <MudText id="result" Class="mb-4">Current count: @Service.CountState.Value</MudText>
    <MudRadioGroupRx id="radio" RxStateGroup=@Service.GetPizzas1() />
    <MudButtonRx id="button1" Color=" Color.Primary" Variant="Variant.Filled" StateProvider=@Service.Increment>Increment</MudButtonRx>
    <MudButtonPRx id="button2" Color="Color.Primary" Variant="Variant.Filled" ValueFactoryAsync=@DVFA.Factory(5) StateTransformer=@Service.Add>Add 5</MudButtonPRx>
    <MudText Typo="Typo.h5" GutterBottom="true">@($"Equals executions {_equalsExecutions}")</MudText>
    <MudButtonRx Color="Color.Error" Variant="Variant.Filled" StateProvider=@Service.EqualsTest>EqualsTest</MudButtonRx>
    <MudText Typo="Typo.h5" GutterBottom="true">@($"Equals async executions {_equalsAsyncExecutions}")</MudText>
    <MudButtonPRx Color="Color.Error" Variant="Variant.Filled" ValueFactoryAsync=@DVFA.Factory(1) StateTransformer=@Service.EqualsTestAsync>EqualsTestAsync</MudButtonPRx>

    <MudGrid>
        @if (Service.Exceptions.Any())
    {
        <MudItem xs="12">
            <MudText Typo="Typo.h5" GutterBottom="true">@GetExceptions()</MudText>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick=@(() => Service.ResetExceptions())>Reset Exceptions</MudButton>
        </MudItem>
    }
    </MudGrid>
</MudStack>

@code {
    private long _equalsExecutions = 0;
    private long _equalsAsyncExecutions = 0;

    protected override void ServiceStateHasChanged(Guid id, ChangeReason changeReason)
    {
        if (id == Service.EqualsTest.ID && Service.EqualsTest.Changed())
        {
            _equalsExecutions++;
            StateHasChanged();
        }

        if (id == Service.EqualsTestAsync.ID && Service.EqualsTestAsync.Changed())
        {
            _equalsAsyncExecutions++;
            StateHasChanged();
        }
    }

    private int GetEqualsParameter()
    {
        return _equalsExecutions == 0 ? 1 : 2;
    }

    private string GetExceptions()
    {
        return Service.Exceptions.Aggregate("", (p, n) => p + $"{n.Exception.Message} - {n.ID}, ").TrimEnd(new[] { ' ', ',' });
    }
}